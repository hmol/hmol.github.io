{"version":3,"sources":["face.jpg","Components/Projects/ProjectItem/calendar.svg","Components/Terminal/TerminalLine/TerminalLine.tsx","Components/Terminal/Terminal.tsx","Components/Projects/ProjectItem/Technologies/Technologies.tsx","Components/Projects/ProjectItem/ProjectItem.tsx","Components/Projects/Projects.tsx","Components/Links/Links.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","TerminalLine","terminalPrint","this","props","print","href","className","command","React","Component","Terminal","target","rel","Technologies","technologies","names","map","item","ProjectItem","dateString","datestart","dateend","customer","src","CalendarIcon","employer","text","Projects","Links","App","Face","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b23ab69c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/face.28c04916.jpg\";","module.exports = __webpack_public_path__ + \"static/media/calendar.525c6713.svg\";","import React from 'react';\nimport './TerminalLine.scss';\n\nclass TerminalLine  extends React.Component<TerminalLineProps> {\n    render() {\n\t\tlet terminalPrint = <span>{this.props.print}</span>;\n\t\tif(this.props.href) {\n\t\t\tterminalPrint = <a href={this.props.href}>{this.props.print}</a>\n\t\t}\n        return (\t\t\t\n\t\t\t\t<div className=\"terminal-line\">\n\t\t\t\t\t<div className=\"terminal-command\">\n\t\t\t\t\t\t{this.props.command}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"terminal-print\">\n\t\t\t\t\t\t\"{terminalPrint}\"\n\t\t\t\t\t</div>\n\t\t\t  </div>\n        );  }\n}\n\nexport default TerminalLine;\ntype TerminalLineProps = {\n\tcommand: string,\n\tprint: string,\n\thref?: string\n}","import React from 'react';\nimport './Terminal.scss';\nimport TerminalLine from './TerminalLine/TerminalLine';\n\nclass Terminal extends React.Component {\n    render() {\n        return (\n\t\t\t<div className=\"terminal\">\n\t\t\t<div className=\"terminal-header\">\n\t\t\t</div>\n\t\t\t<div className=\"terminal-container\">\n\t\t\t\t\t<TerminalLine command=\"henrik.work\"\n\t\t\t\t\t\t\t\t\t\t\t\tprint=\"Fullstack developer/consultant at ITverket\">\n\t\t\t\t\t</TerminalLine>\n\t\t\t\t\t<TerminalLine command=\"henrik.education\"\n\t\t\t\t\t\t\t\t\t\t\t\tprint=\"Bachelor Informatics, Oslo University College (HiO)\">\n\t\t\t\t\t</TerminalLine>\n\t\t\t\t\t<TerminalLine command=\"henrik.resume\"\n\t\t\t\t\t\t\t\t\t\t\t\tprint=\"henrik-cv.pdf\"\n\t\t\t\t\t\t\t\t\t\t\t\thref=\"https://github.com/hmol/Curriculum-Vitae/raw/master/henrik_cv.pdf\t\">\n\t\t\t\t\t</TerminalLine>\n\n\t\t\t\t\t<TerminalLine command=\"henrik.currentLocation\"\n\t\t\t\t\t\t\t\t\t\t\t\tprint=\"59.913868,10.752245\"\n\t\t\t\t\t\t\t\t\t\t\t\thref=\"https://www.google.com/maps/place/Oslo/\">\n\t\t\t\t\t</TerminalLine>\n\t\t\t\t\t<div className=\"terminal-line\">\n\t\t\t\t\t\t<div className=\"terminal-command\">\n\t\t\t\t\t\t\thenrik.interests\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"terminal-print\">\n\t\t\t\t\t\t\t[\"<a href=\"https://open.spotify.com/embed/user/hmol_/playlist/4o8JeOveTdtRBXFGFmeKxY\" \n\t\t\t\t\t\t\ttarget=\"_blank\" rel=\"noopener noreferrer\">music</a>\", \"<a href=\"https://www.imdb.com/list/ls090420886/\" target=\"_blank\" rel=\"noopener noreferrer\">movies</a>\", \"football\", \"hiking\"]\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t  <div className=\"terminal-line\">\n\t\t\t\t\t<div className=\"terminal-command\">\n\t\t\t\t\t\t<span className=\"char\">\n\t\t\t\t\t\t\t&nbsp;\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>\n\t\t\t  </div>\n\t\t\t</div>\n\t\t  </div>\n        );  }\n}\n\nexport default Terminal;","\nimport React from 'react';\nimport './Technologies.scss';\n\nclass Technologies extends React.Component<TechnologiesProps>  {\n    render() {\n\n        const technologies = this.props.names.map((item: string) => <span>{item}</span>);\n        \n        return (\n            <div className=\"technologies\">\n                {technologies}\n            </div>\n        );\n    }\n}\n\nexport default Technologies;\n\n\ntype TechnologiesProps = {\n\tnames: string[]\n}","import React, { Props } from 'react';\nimport './ProjectItem.scss';\nimport Technologies from './Technologies/Technologies';\nimport CalendarIcon from './calendar.svg';\n\nclass ProjectItem extends React.Component<ProjectItemProps> {\n\trender() {\n\n\t\tlet dateString = this.props.datestart;\n\t\tif(this.props.dateend) {\n\t\t\tdateString += ' â€“ ' + this.props.dateend;\n\t\t}\n\n\t\treturn (\n\t\t\t<div className=\"project\">\n\t\t\t\t<h3>{this.props.customer}</h3>\n\t\t\t\t<div className=\"date\">\n\t\t\t\t\t<img src={CalendarIcon} className=\"calendar-icon\"></img>\n\t\t\t\t\t{dateString}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"employer\">\n\t\t\t\t\tEmployer: {this.props.employer}\n\t\t\t\t</div>\n\t\n\t\t\t\t<p>{this.props.text}</p>\n\t\t\t\t<Technologies names={this.props.technologies}></Technologies>\n\t\t\t</div>\n        );  }\n}\n\nexport default ProjectItem;\n\ntype ProjectItemProps = {\n\tcustomer: string,\n\ttext: string,\n\tdatestart: string,\n\tdateend?: string,\n\ttechnologies: string[],\n\temployer: string\n}","import React from 'react';\nimport './Projects.scss';\nimport ProjectItem from './ProjectItem/ProjectItem';\n\nclass Projects extends React.Component {\n    render() {\n        return (\n        <div className=\"projects\">\n            <h2>Projects</h2>\n            <ProjectItem customer=\"Cenium\" \n                 datestart=\"09/05/2019\"   \n                 employer=\"ITverket\"           \n                 text=\"I'm now part of a devops team at Cenium where we are working with an ERP system for hotels.\"\n\t\t technologies={['dotnetcore/c#', 'Azure', 'MSSQL Server', 'TeamCity', 'Octopus Deploy', 'Git', 'powershell', 'NUnit']}>\n            </ProjectItem>\n            <ProjectItem customer=\"A confidential project\" \n                    datestart=\"01/09/2016\"\n                    dateend=\"12/04/2019\"\n                    employer=\"ITverket\"\n                    text=\"Worked as a fullstack developer creating a new CRM system for a business in a niche market. I had responsibility for developing the case management functions in this system. The REST API was built in dotnetcore adhering to the CQRS pattern. On the frontend side we used Angular.\"\n                    technologies={['Google Cloud', 'nginx', 'Docker', 'CQRS', 'PostgreSQL', 'Angular', 'dotnetcore/c#', 'Scss', 'mongoDB',  'Bash', 'NServicebus', 'Git', 'NUnit', 'CircleCI']}>\n            </ProjectItem>\n            <ProjectItem customer=\"The norwegian goverment pension fund (SPK)\" \n                    datestart=\"01/09/2015\"\n                    dateend=\"31/08/2016\"\n                    employer=\"Making Waves\"\n                    text=\"Participated in the development of a new loan application for the members of the SPK. React on the frontend and .NET on the backend. I was also part of a devops team and worked on maintenance of older systems and developing new functionality.\"\n                    technologies={['React', 'ASP.NET/c#', 'Solr', 'Episerver', 'Octopus Deploy', 'TeamCity', 'Git', 'MSSQL Server', 'NUnit']}>\n            </ProjectItem>\n            <ProjectItem customer=\"The norwegian goverment (Regjeringen)\" \n                    datestart=\"01/03/2014\"\n                    dateend=\"01/04/2015\"\n                    employer=\"Making Waves\"\n                    text=\"Worked with a team of other developers to create the new regjeringen.no. Had, among other things, responsibility for the migration of the old content database, implementation of new search, import of government publications and the development of several page types.\"\n                    technologies={['Azure', 'Varnish', 'ElasticSearch', 'ASP.NET/c#', 'Episerver', 'MSSQL Server', 'Git', 'xUnit']}>\n            </ProjectItem>\n            <ProjectItem customer=\"The norwegian parliament (Stortinget)\" \n                    datestart=\"01/08/2012\"\n                    dateend=\"01/03/2014\"\n                    employer=\"Making Waves\"\n                    text=\"Took part of creating a new intranet for the Norwegian parliament. Developed several page types for Episerver, integrations against internal systems writen in ASP.NET/C# and a enterprise search.\"\n                    technologies={['ASP.NET/c#', 'ElasticSearch', 'Powershell', 'Team City', 'MSSQL Server', 'Git']}>\n            </ProjectItem>\n        </div>\n        );  }\n}\n\nexport default Projects;","\nimport React from 'react';\nimport './Links.scss';\n\nclass Links extends React.Component  {\n    render() {\n\n        return (\n\t\t\t<div className=\"contact\">\n\t\t\t\t<h2>Links</h2>\n\t\t\t\t<div className=\"links\">\n\t\t\t\t\t<a href=\"mailto:molnes@gmail.com\">Mail</a>\n\t\t\t\t\t<a href=\"https://www.linkedin.com/in/henrikmolnes\">LinkedIn</a>\n\t\t\t\t\t<a href=\"https://github.com/hmol\">Github</a>\n\t\t\t\t\t<a href=\"https://github.com/hmol/writings\">Writings</a>\n\t\t\t\t</div>\n\t\t  \t</div>\n        );\n    }\n}\n\nexport default Links;","import React from 'react';\nimport Face from'./face.jpg';\nimport './App.scss';\nimport Terminal from './Components/Terminal/Terminal';\nimport Projects from './Components/Projects/Projects';\nimport Links from './Components/Links/Links';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <img src={Face} className=\"face\"></img> \n        <div className=\"header\">\n        > Hi! I'm Henrik <span>ðŸ‘‹</span>\n        </div>\n        <p className=\"intro-sub\">\n          I work as a fullstack developer, therefore I get satisfaction from having the responsibility for a software feature and developing it all the way from the database up to the GUI (usually html/css). \n        </p>\n        <p className=\"intro-sub\">\n          My main experience is with developing REST APIs in dotnet with Angular in the frontend. \n          Currently I think nodejs, docker and graphql are exciting technologies that I will try to learn more about.\n          My preferred dev-environment consists of these vital parts: Ubuntu, Visual Studio Code, Rider, Docker and Git.\n        </p>\n\n        <Terminal></Terminal>\n        <Projects></Projects>\n        <h2>Some thoughts on software development</h2>\n        <p className=\"intro-sub\">\n          Code is often written one time and read a countless times. \n          This is why I like readable code.\n          What I do not like is extreme TDD where the goal is 100% testcoverage. \n          It is utopia and impossible to maintain. \n          On the other hand, I like having unit tests for the most businiss crucial functions in the system.           \n          In my experience these tests will also serve as a form of documentation and force the developer to write readable code. \n        </p>\n        <p className=\"intro-sub\">\n          KISS, keep it simple stupid, is my main mantra. \n          This is because it is so easy to do overengineering in software development.\n          It is important to remember that simpler is always better. \n          The developer should always think twice before introducing a new pattern.\n          In my opinion the goal should always be to reduce complexity as much as possible.\n        </p>\n        <Links></Links>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}